// 服务端 DoIP_Server
模拟车辆上的ECU(DoIP实体)，能够通过UDS进行诊断刷写。

	[x] 启动后，按DOIP协议，广播车辆声明
	[x] 能响应路由激活 （DOIP协议）
	[x] 支持UDS服务
		[x] 22服务，读取DID， DID是厂商自己定义的，这里可以利用DID来模拟车速、温度等信息
		[x] 读取故障码
		[0] 清除故障码
		[0] 刷写程序
		

// UDS相关
DID: 一个标识符，由零件供应商确定
	PS: 这个就想存放东西的ID一样，ECU会存放一些数据，给这些数据定一个编号，供外部读取，并且知道其代表什么意思。
		例如规定 DID=F190 表示该区域的数据为车辆VIN吗，通过UDS的22服务，可以读取到该数据。


DTC:Diagnostic Trouble Code，诊断故障码，即 故障类型的 ID。
	四个字节组成：Byte3 Byte2 Byte1 Byte0
					DTC标识符      | DTC状态码
					P1028	
	
	看上去是ECU的供应商，预先定义协议故障代码，然后再使用的过程中，不断对该故障进行测试，并把测试结果存储到该故障码的最后一个字节
	即状态码。
	
	掩码的作用：
		与DID不同，DTC不是通过具体的DID去读取，而是通过掩码去匹配符合的DTC
		例如，有三个故障码及其状态码，外部用0x09掩码做匹配，就会读取到P1028和P1029。
				P1028 0x01
				P1029 0x09
				P1030 0x06
				P1031 0x02
		0x09: 1001 //意为，关心bit1或者bit3 只要有一个bit为1 就匹配成功
		程序里面理解就是做了按位&的运算
		if(0x09 & status)	// 匹配成功
				
	
	https://www.jianshu.com/p/e33bfa5da408


// 22 服务，按照DID来读取数据
	--> 22 F1 90	// DID=0XF190 常用来作VIN的标识符，这个看零件供应商定
	<-- 62 f1 90 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 // 肯定响应
	
	--> 22 F1 90 F1 91	// 后面可以跟多个DID
	<-- 62 f1 90 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 // 肯定响应
	<-- 62 f1 91 31 32 33 34 74 65 73 74 // 肯定响应

// 19 服务，读取DTC 故障码
	19 02 ReadDTC Status
	19 04 ReadSnapshotData with DTC
	19 06 ReadExtendData with DTC
	19 0A ReadAllSupportedDTC


